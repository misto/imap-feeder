#!/usr/bin/env ruby

require 'imap-feeder'
require 'imap-feeder/createconfigparser'
require 'imap-feeder/imapfeederconfig'
require 'imap-feeder/fakeserver.rb'

opts = CreateConfigParser.parse(ARGV)

if opts.create
  $stdout.puts "Creating new configuration."
  ImapFeederConfig.create(opts.create_file, opts.folder)
  $stdout.puts "Please edit your settings.rb file now."

elsif opts.check
  $stdout.puts "Checking configuration #{opts.check}"
  $log = Logger.new($stdout)
  ImapFeederConfig.check(File.open(opts.check))

elsif ARGV.first and load(ARGV.first)
  configuration = [$host, $user, $pass, $temp, $config]
  if not configuration.all?
    $stderr.puts "Your settings are incomplete, please review settings.rb:"
    $stderr.puts configuration.inspect
    exit 1
  end

  if File.exist? $running_instance
    $stderr.puts "Already running (#{$running_instance})! Aborting..."
    exit 1
  else
    File.new($running_instance, "w")
  end

  store = MessageStore.new($temp)

  server_options = {
    :host => $host,
    :user => $user,
    :pass => $pass,
    :port => $port || "143",
    :use_ssl => $use_ssl || false
  }

  if opts.pretend
    @server = FakeServer.new(server_options)
    def store.save
    end
    $log = Logger.new(STDOUT)
  else
    begin
      @server = Server.new(server_options)
    rescue Exception, Errno::ECONNRESET => e
      $log.error "Could not open initial connection to server: #{e}"
    end
  end

  if @server
    config = File.open($config)
    imapfeeder = ImapFeeder.new(@server, store, config)
    imapfeeder.run
    @server.disconnect
  end

  File.delete $running_instance

else
  $stdout.puts "No options given, maybe you need --help?"
end

